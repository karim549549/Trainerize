generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  isEmailConfirmed Boolean   @default(false)
  passwordHash     String
  gender           String
  age              Int?
  role             String    @default("USER")
  height           Float?
  weight           Float?
  calorieTarget    Float
  allergies        String?   @default("[]")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  subscriptions      UserSubscription[]
  dietPlans          DietPlan[]
  verificationTokens VerificationToken[]

  @@index([calorieTarget])
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Recipe {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  ingredients   String
  instructions  String
  calories      Float
  dietType      String
  image         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  allergies     String         @default("[]")
  dietPlanMeals DietPlanMeal[]
}

model DietPlan {
  id        Int      @id @default(autoincrement())
  userId    String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User           @relation(fields: [userId], references: [id])
  meals DietPlanMeal[]
}

model DietPlanMeal {
  id         Int      @id @default(autoincrement())
  dietPlanId Int
  recipeId   Int
  scheduleAt DateTime
  createdAt  DateTime @default(now())

  dietPlan DietPlan @relation(fields: [dietPlanId], references: [id])
  recipe   Recipe   @relation(fields: [recipeId], references: [id])
}

model SubscriptionTier {
  id            Int                @id @default(autoincrement())
  name          String             @unique
  pricePerMonth Float
  features      String
  createdAt     DateTime           @default(now())
  subscriptions UserSubscription[]
}

model UserSubscription {
  id        Int              @id @default(autoincrement())
  userId    String
  tierId    Int
  startDate DateTime
  endDate   DateTime
  isActive  Boolean
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
  tier      SubscriptionTier @relation(fields: [tierId], references: [id])
}
